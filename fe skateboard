--MADE BY ??Z?US??K'ING#4299--
-- زلجه
-- ;hat me 5063577434

-- -gh 5063577434

function rmesh(a)
if not (workspace[game.Players.LocalPlayer.Name][a].Handle:FindFirstChild('Mesh') or workspace[game.Players.LocalPlayer.Name][a].Handle:FindFirstChild('SpecialMesh')) then return end
old=game.Players.LocalPlayer.Character
game.Players.LocalPlayer.Character=workspace[game.Players.LocalPlayer.Name]
for i,v in next, workspace[game.Players.LocalPlayer.Name]:FindFirstChild(a).Handle:GetDescendants() do
if v:IsA('Mesh') or v:IsA('SpecialMesh') then
v:Remove()
end
end
for i = 1 , 2 do
game.Players.LocalPlayer.Character=old
end
end

HumanDied = false for i,v in next, game:GetService("Players").LocalPlayer.Character:GetDescendants() do if v:IsA("BasePart") then  _G.netless=game:GetService("RunService").Heartbeat:connect(function() v.AssemblyLinearVelocity = Vector3.new(-30,0,0) sethiddenproperty(game.Players.LocalPlayer,"MaximumSimulationRadius",math.huge) sethiddenproperty(game.Players.LocalPlayer,"SimulationRadius",999999999) end) end end  local plr = game.Players.LocalPlayer local char = plr.Character local srv = game:GetService('RunService') local ct = {}  char.Archivable = true local reanim = char:Clone() reanim.Name = 'Nexo '..plr.Name..'' fl=Instance.new('Folder',char) fl.Name ='Nexo' reanim.Animate.Disabled=true char.HumanoidRootPart:Destroy() char.Humanoid:ChangeState(16)  for i,v in next, char.Humanoid:GetPlayingAnimationTracks() do v:Stop() end char.Animate:Remove()  function create(part, parent, p, r) Instance.new("Attachment",part) Instance.new("AlignPosition",part) Instance.new("AlignOrientation",part) Instance.new("Attachment",parent) part.Attachment.Name = part.Name parent.Attachment.Name = part.Name part.AlignPosition.Attachment0 = part[part.Name] part.AlignOrientation.Attachment0 = part[part.Name] part.AlignPosition.Attachment1 = parent[part.Name] part.AlignOrientation.Attachment1 = parent[part.Name] parent[part.Name].Position = p or Vector3.new() part[part.Name].Orientation = r or Vector3.new() part.AlignPosition.MaxForce = 999999999 part.AlignPosition.MaxVelocity = math.huge part.AlignPosition.ReactionForceEnabled = false part.AlignPosition.Responsiveness = math.huge part.AlignOrientation.Responsiveness = math.huge part.AlignPosition.RigidityEnabled = false part.AlignOrientation.MaxTorque = 999999999 end  for i,v in next, char:GetDescendants() do if v:IsA('Accessory') then v.Handle:BreakJoints() create(v.Handle,reanim[v.Name].Handle) end end  char.Torso['Left Shoulder']:Destroy() char.Torso['Right Shoulder']:Destroy() char.Torso['Left Hip']:Destroy() char.Torso['Right Hip']:Destroy()  create(char['Torso'],reanim['Torso']) create(char['Left Arm'],reanim['Left Arm']) create(char['Right Arm'],reanim['Right Arm']) create(char['Left Leg'],reanim['Left Leg']) create(char['Right Leg'],reanim['Right Leg'])  for i,v in next, reanim:GetDescendants() do if v:IsA('BasePart') or v:IsA('Decal') then v.Transparency = 1 end end  reanim.Parent = fl  for i,v in next, reanim:GetDescendants() do if v:IsA('BasePart') then table.insert(ct,srv.RenderStepped:Connect(function() v.CanCollide = false end)) end end  for i,v in next, char:GetDescendants() do if v:IsA('BasePart') then table.insert(ct,srv.RenderStepped:Connect(function() v.CanCollide = false end)) end end  for i,v in next, reanim:GetDescendants() do if v:IsA('BasePart') then table.insert(ct,srv.Stepped:Connect(function() v.CanCollide = false end)) end end  for i,v in next, char:GetDescendants() do if v:IsA('BasePart') then table.insert(ct,srv.Stepped:Connect(function() v.CanCollide = false end)) end end  table.insert(ct,reanim.Humanoid.Died:Connect(function() plr.Character = char char:BreakJoints() reanim:Destroy() game.Players:Chat('-gr') _G.netless:Disconnect() HumanDied = true for _,v in pairs(ct) do v:Disconnect() end end))  plr.Character = reanim workspace.CurrentCamera.CameraSubject = reanim.Humanoid

IT = Instance.new
CF = CFrame.new
VT = Vector3.new
RAD = math.rad
C3 = Color3.new
UD2 = UDim2.new
BRICKC = BrickColor.new
ANGLES = CFrame.Angles
EULER = CFrame.fromEulerAnglesXYZ
COS = math.cos
ACOS = math.acos
SIN = math.sin
ASIN = math.asin
ABS = math.abs
MRANDOM = math.random
FLOOR = math.floor

speed = 1
sine = 1
srv = game:GetService('RunService')

reanim = game.Players.LocalPlayer.Character

function hat(h,p,c1,c0,m)
reanim[h].Handle.AccessoryWeld.Part1=reanim[p]
reanim[h].Handle.AccessoryWeld.C1=c1 or CFrame.new()
reanim[h].Handle.AccessoryWeld.C0=reanim[h].Handle.AccessoryWeld.C0:Lerp(c0 or CFrame.new(),1)
if m == true then
rmesh(h)
end
end

m=game.Players.LocalPlayer:GetMouse()
RJ = reanim.HumanoidRootPart.RootJoint
RS = reanim.Torso['Right Shoulder']
LS = reanim.Torso['Left Shoulder']
RH = reanim.Torso['Right Hip']
LH = reanim.Torso['Left Hip']
Root = reanim.HumanoidRootPart
NECK = reanim.Torso.Neck
NECK.C0 = CF(0,1,0)*ANGLES(RAD(0),RAD(0),RAD(0))
NECK.C1 = CF(0,-0.5,0)*ANGLES(RAD(0),RAD(0),RAD(0))
RJ.C1 = CF(0,-1,0)*ANGLES(RAD(0),RAD(0),RAD(0))
RJ.C0 = CF(0,0,0)*ANGLES(RAD(0),RAD(0),RAD(0))
RS.C1 = CF(0,0.5,0)*ANGLES(RAD(0),RAD(0),RAD(0))
LS.C1 = CF(0,0.5,0)*ANGLES(RAD(0),RAD(0),RAD(0))
RH.C1 = CF(0,1,0)*ANGLES(RAD(0),RAD(0),RAD(0))
LH.C1 = CF(0,1,0)*ANGLES(RAD(0),RAD(0),RAD(0))
RH.C0 = CF(0,0,0)*ANGLES(RAD(0),RAD(0),RAD(0))
LH.C0 = CF(0,0,0)*ANGLES(RAD(0),RAD(0),RAD(0))
RS.C0 = CF(0,0,0)*ANGLES(RAD(0),RAD(0),RAD(0))
LS.C0 = CF(0,0,0)*ANGLES(RAD(0),RAD(0),RAD(0))


Mode='1'

mousechanger=game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(k)
if k == '1' then-- first mode
Mode='1'
elseif k == 'e' then-- second mode
Mode='2'
elseif k == 'q' then-- first mode again
Mode='1'
end
end)

attacklol=game.Players.LocalPlayer:GetMouse().Button1Down:Connect(function()
Mode='Attack0'
wait(.5) -- time of attack u can edit this
Mode='Attack1'
wait(.3)
Mode='Attack3'
wait(.2)
Mode ='1' -- change this mode to whatever u want the mode to be after attacking
end)


-- for modes u can go in this link : https://Nexo.notxeneon15.repl.co/nexo/modes.lua

coroutine.wrap(function()
while true do -- anim changer
if HumanDied then break end
sine = sine + speed
local rlegray = Ray.new(reanim["Right Leg"].Position + Vector3.new(0, 0.5, 0), Vector3.new(0, -2, 0))
local rlegpart, rlegendPoint = workspace:FindPartOnRay(rlegray, char)
local llegray = Ray.new(reanim["Left Leg"].Position + Vector3.new(0, 0.5, 0), Vector3.new(0, -2, 0))
local llegpart, llegendPoint = workspace:FindPartOnRay(llegray, char)
local rightvector = (Root.Velocity * Root.CFrame.rightVector).X + (Root.Velocity * Root.CFrame.rightVector).Z
local lookvector = (Root.Velocity * Root.CFrame.lookVector).X + (Root.Velocity * Root.CFrame.lookVector).Z
if lookvector > reanim.Humanoid.WalkSpeed then
lookvector = reanim.Humanoid.WalkSpeed
end
if lookvector < -reanim.Humanoid.WalkSpeed then
lookvector = -reanim.Humanoid.WalkSpeed
end
if rightvector > reanim.Humanoid.WalkSpeed then
rightvector = reanim.Humanoid.WalkSpeed
end
if rightvector < -reanim.Humanoid.WalkSpeed then
rightvector = -reanim.Humanoid.WalkSpeed
end
local lookvel = lookvector / reanim.Humanoid.WalkSpeed
local rightvel = rightvector / reanim.Humanoid.WalkSpeed
if Mode == '1' then
game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = 16
if reanim.Humanoid.Jump then -- jump

elseif Root.Velocity.y < -1 and reanim.Humanoid.Jump then -- fall

elseif Root.Velocity.Magnitude < 2 then -- idle
hat('COLDSTARESKATEBOARD','Left Arm',CFrame.new(0,0,0),CFrame.new(-0.68+0*math["cos"](sine/10),0.93+0*math["cos"](sine/10),-0.14+0*math["cos"](sine/10))*CFrame.Angles(math.rad(90+0*math["cos"](sine/10)),math.rad(-50+0*math["cos"](sine/10)),math.rad(90+0*math["cos"](sine/10))),false)
NECK.C0=NECK.C0:Lerp(CFrame.new(0+0*math.cos(sine/10),1+0*math.cos(sine/10),0+0*math.cos(sine/10))*CFrame.Angles(math.rad(0+0*math.cos(sine/10)),math.rad(0+0*math.cos(sine/10)),math.rad(0+0*math.cos(sine/10))),.2) 
RJ.C0=RJ.C0:Lerp(CFrame.new(0+0*math.sin(sine/30),-1+-0.1*math.sin(sine/30),0+0*math.sin(sine/30))*CFrame.Angles(math.rad(0+0*math.sin(sine/30)),math.rad(0+0*math.sin(sine/30)),math.rad(0+0*math.sin(sine/30))),.2) 
RS.C0=RS.C0:Lerp(CFrame.new(1.5+0*math.cos(sine/10),0.5+0*math.cos(sine/10),0+0*math.cos(sine/10))*CFrame.Angles(math.rad(0+5*math.cos(sine/10)),math.rad(5.58+5*math.cos(sine/10)),math.rad(13.23+-5*math.cos(sine/10))),.2) 
LS.C0=LS.C0:Lerp(CFrame.new(-1.5+0*math.sin(sine/10),0.5+0*math.sin(sine/10),0+0*math.sin(sine/10))*CFrame.Angles(math.rad(0+0*math.sin(sine/10)),math.rad(20.87+-5*math.sin(sine/10)),math.rad(-9.7+5*math.sin(sine/10))),.2) 
RH.C0=RH.C0:Lerp(CFrame.new(0.5+0*math.sin(sine/30),-1+0.1*math.sin(sine/30),0+0*math.sin(sine/30))*CFrame.Angles(math.rad(0+0*math.sin(sine/30)),math.rad(-9.7+0*math.sin(sine/30)),math.rad(5.58+0*math.sin(sine/30))),.2) 
LH.C0=LH.C0:Lerp(CFrame.new(-0.5+0*math.sin(sine/30),-1+0.1*math.sin(sine/30),0+0*math.sin(sine/30))*CFrame.Angles(math.rad(0+0*math.sin(sine/30)),math.rad(13.23+0*math.sin(sine/30)),math.rad(-9.7+0*math.sin(sine/30))),.2)
elseif Root.Velocity.Magnitude < 20 then -- walk
NECK.C0=NECK.C0:Lerp(CFrame.new(0+0*math.cos(sine/10),1+0*math.cos(sine/10),0+0*math.cos(sine/10))*CFrame.Angles(math.rad(0+0*math.cos(sine/10)),math.rad(0+0*math.cos(sine/10)),math.rad(0+0*math.cos(sine/10))),.2) 
RJ.C0=RJ.C0:Lerp(CFrame.new(0+0*math.sin(sine/2.5),-1+0*math.sin(sine/2.5),0+0*math.sin(sine/2.5))*CFrame.Angles(math.rad(-9.7+10*math.sin(sine/2.5)),math.rad(0+0*math.sin(sine/2.5)),math.rad(0+0*math.sin(sine/2.5))),.2) 
RS.C0=RS.C0:Lerp(CFrame.new(1.5+0*math.sin(sine/3),0.5+0*math.sin(sine/3),0+0*math.sin(sine/3))*CFrame.Angles(math.rad(0+50*math.sin(sine/3)),math.rad(0+20*math.sin(sine/3)),math.rad(0+0*math.sin(sine/3))),.2) 
LS.C0=LS.C0:Lerp(CFrame.new(-1.5+0*math.sin(sine/3),0.5+0*math.sin(sine/3),0+0*math.sin(sine/3))*CFrame.Angles(math.rad(-9.7+5*math.sin(sine/3)),math.rad(-2.06+-3*math.sin(sine/3)),math.rad(-5+5*math.sin(sine/3))),.2) 
RH.C0=RH.C0:Lerp(CFrame.new(0.5+0*math.sin(sine/3),-1+0*math.sin(sine/3),-0.14+0*math.sin(sine/3))*CFrame.Angles(math.rad(0+-50*math.sin(sine/3)),math.rad(0+0*math.sin(sine/3)),math.rad(0+0*math.sin(sine/3))),.2) 
LH.C0=LH.C0:Lerp(CFrame.new(-0.5+0*math.sin(sine/3),-1+0*math.sin(sine/3),-0.14+0*math.sin(sine/3))*CFrame.Angles(math.rad(0+50*math.sin(sine/3)),math.rad(0+0*math.sin(sine/3)),math.rad(0+0*math.sin(sine/3))),.2)
elseif Root.Velocity.Magnitude > 20 then -- run
NECK.C0=NECK.C0:Lerp(CFrame.new(0+0*math.cos(sine/10),1+0*math.cos(sine/10),0+0*math.cos(sine/10))*CFrame.Angles(math.rad(0+0*math.cos(sine/10)),math.rad(0+0*math.cos(sine/10)),math.rad(0+0*math.cos(sine/10))),.2) 
RJ.C0=RJ.C0:Lerp(CFrame.new(0+0*math.sin(sine/2.5),-1+0*math.sin(sine/2.5),0+0*math.sin(sine/2.5))*CFrame.Angles(math.rad(-9.7+10*math.sin(sine/2.5)),math.rad(0+0*math.sin(sine/2.5)),math.rad(0+0*math.sin(sine/2.5))),.2) 
RS.C0=RS.C0:Lerp(CFrame.new(1.5+0*math.sin(sine/3),0.5+0*math.sin(sine/3),0+0*math.sin(sine/3))*CFrame.Angles(math.rad(0+50*math.sin(sine/3)),math.rad(0+20*math.sin(sine/3)),math.rad(0+0*math.sin(sine/3))),.2) 
LS.C0=LS.C0:Lerp(CFrame.new(-1.5+0*math.sin(sine/3),0.5+0*math.sin(sine/3),0+0*math.sin(sine/3))*CFrame.Angles(math.rad(-9.7+5*math.sin(sine/3)),math.rad(-2.06+-3*math.sin(sine/3)),math.rad(-5+5*math.sin(sine/3))),.2) 
RH.C0=RH.C0:Lerp(CFrame.new(0.5+0*math.sin(sine/3),-1+0*math.sin(sine/3),-0.14+0*math.sin(sine/3))*CFrame.Angles(math.rad(0+-50*math.sin(sine/3)),math.rad(0+0*math.sin(sine/3)),math.rad(0+0*math.sin(sine/3))),.2) 
LH.C0=LH.C0:Lerp(CFrame.new(-0.5+0*math.sin(sine/3),-1+0*math.sin(sine/3),-0.14+0*math.sin(sine/3))*CFrame.Angles(math.rad(0+50*math.sin(sine/3)),math.rad(0+0*math.sin(sine/3)),math.rad(0+0*math.sin(sine/3))),.2)
end

elseif Mode == '2' then
game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = 50
if reanim.Humanoid.Jump then -- jump
hat('COLDSTARESKATEBOARD','Torso',CFrame.new(0,0,0),CFrame.new(-0.2+0*math["sin"](sine/1),0+0*math["sin"](sine/1),2.3+0*math["sin"](sine/1))*CFrame.Angles(math.rad(90+0*math["sin"](sine/1)),math.rad(40+0*math["sin"](sine/1)),math.rad(0+0*math["sin"](sine/1))),false)
NECK.C0=NECK.C0:Lerp(CFrame.new(0+0*math.cos(sine/10),1+0*math.cos(sine/10),0+0*math.cos(sine/10))*CFrame.Angles(math.rad(0+0*math.cos(sine/10)),math.rad(0+0*math.cos(sine/10)),math.rad(0+0*math.cos(sine/10))),.2) 
RJ.C0=RJ.C0:Lerp(CFrame.new(0+0*math.sin(sine/1),2+0*math.sin(sine/1),0+0*math.sin(sine/1))*CFrame.Angles(math.rad(0+180*math.sin(sine/1)),math.rad(82+0*math.sin(sine/1)),math.rad(0+0*math.sin(sine/1))),.2) 
RS.C0=RS.C0:Lerp(CFrame.new(1.5+0*math.cos(sine/10),0.5+0*math.cos(sine/10),0+0*math.cos(sine/10))*CFrame.Angles(math.rad(-17.34+5*math.cos(sine/10)),math.rad(-9.7+5*math.cos(sine/10)),math.rad(5.58+-5*math.cos(sine/10))),.2) 
LS.C0=LS.C0:Lerp(CFrame.new(-1.5+0*math.sin(sine/10),0.5+0*math.sin(sine/10),0+0*math.sin(sine/10))*CFrame.Angles(math.rad(0+0*math.sin(sine/10)),math.rad(20.87+-5*math.sin(sine/10)),math.rad(5.58+5*math.sin(sine/10))),.2) 
RH.C0=RH.C0:Lerp(CFrame.new(0.5+0*math.sin(sine/30),-0.14+0.1*math.sin(sine/30),-0.5+0*math.sin(sine/30))*CFrame.Angles(math.rad(-24.9+5*math.sin(sine/30)),math.rad(-9.7+5*math.sin(sine/30)),math.rad(5.58+5*math.sin(sine/30))),.2) 
LH.C0=LH.C0:Lerp(CFrame.new(-0.5+0*math.sin(sine/30),-0.14+0.1*math.sin(sine/30),-0.5+0*math.sin(sine/30))*CFrame.Angles(math.rad(-24.98+5*math.sin(sine/30)),math.rad(13.23+5*math.sin(sine/30)),math.rad(-9.7+5*math.sin(sine/30))),.2)
elseif Root.Velocity.y < -1 and reanim.Humanoid.Jump then -- fall
hat('COLDSTARESKATEBOARD','Torso',CFrame.new(0,0,0),CFrame.new(0+0*math["sin"](sine/1),0+0*math["sin"](sine/1),4.15+0*math["sin"](sine/1))*CFrame.Angles(math.rad(90+10*math["sin"](sine/1)),math.rad(1280+1280*math["sin"](sine/1)),math.rad(0+10*math["sin"](sine/1))),false)
NECK.C0=NECK.C0:Lerp(CFrame.new(0+0*math.cos(sine/10),1+0*math.cos(sine/10),0+0*math.cos(sine/10))*CFrame.Angles(math.rad(0+0*math.cos(sine/10)),math.rad(0+0*math.cos(sine/10)),math.rad(0+0*math.cos(sine/10))),.2) 
RJ.C0=RJ.C0:Lerp(CFrame.new(0+0*math.sin(sine/1),2+0*math.sin(sine/1),0+0*math.sin(sine/1))*CFrame.Angles(math.rad(0+-100*math.sin(sine/1)),math.rad(82+0*math.sin(sine/1)),math.rad(0+100*math.sin(sine/1))),.2) 
RS.C0=RS.C0:Lerp(CFrame.new(1.5+0*math.cos(sine/10),0.5+0*math.cos(sine/10),0+0*math.cos(sine/10))*CFrame.Angles(math.rad(36.15+5*math.cos(sine/10)),math.rad(-9.7+5*math.cos(sine/10)),math.rad(59.08+-5*math.cos(sine/10))),.2) 
LS.C0=LS.C0:Lerp(CFrame.new(-1.5+0*math.sin(sine/10),0.5+0*math.sin(sine/10),0+0*math.sin(sine/10))*CFrame.Angles(math.rad(0+0*math.sin(sine/10)),math.rad(20.87+-5*math.sin(sine/10)),math.rad(-32.62+5*math.sin(sine/10))),.2) 
RH.C0=RH.C0:Lerp(CFrame.new(0.5+0*math.sin(sine/30),-0.14+0.1*math.sin(sine/30),-0.5+0*math.sin(sine/30))*CFrame.Angles(math.rad(-9.7+5*math.sin(sine/30)),math.rad(-9.7+5*math.sin(sine/30)),math.rad(5.58+5*math.sin(sine/30))),.2) 
LH.C0=LH.C0:Lerp(CFrame.new(-0.5+0*math.sin(sine/30),-0.14+0.1*math.sin(sine/30),-0.5+0*math.sin(sine/30))*CFrame.Angles(math.rad(-9.7+5*math.sin(sine/30)),math.rad(13.23+5*math.sin(sine/30)),math.rad(-9.7+5*math.sin(sine/30))),.2)
elseif Root.Velocity.Magnitude < 2 then -- idle
hat('COLDSTARESKATEBOARD','Torso',CFrame.new(0,0,0),CFrame.new(-0.2+0*math["sin"](sine/1),0+0*math["sin"](sine/1),3.1+0*math["sin"](sine/1))*CFrame.Angles(math.rad(90+0*math["sin"](sine/1)),math.rad(40+0*math["sin"](sine/1)),math.rad(0+0*math["sin"](sine/1))),false)
NECK.C0=NECK.C0:Lerp(CFrame.new(0+0*math.cos(sine/10),1+0*math.cos(sine/10),0+0*math.cos(sine/10))*CFrame.Angles(math.rad(0+0*math.cos(sine/10)),math.rad(0+0*math.cos(sine/10)),math.rad(0+0*math.cos(sine/10))),.2) 
RJ.C0=RJ.C0:Lerp(CFrame.new(0+0*math.sin(sine/1),-0.5+0*math.sin(sine/1),0+0*math.sin(sine/1))*CFrame.Angles(math.rad(0+0*math.sin(sine/1)),math.rad(89.64+0*math.sin(sine/1)),math.rad(0+0*math.sin(sine/1))),.2) 
RS.C0=RS.C0:Lerp(CFrame.new(1.5+0*math.cos(sine/10),0.5+0*math.cos(sine/10),0+0*math.cos(sine/10))*CFrame.Angles(math.rad(0+5*math.cos(sine/10)),math.rad(5.58+5*math.cos(sine/10)),math.rad(13.23+-5*math.cos(sine/10))),.2) 
LS.C0=LS.C0:Lerp(CFrame.new(-1.5+0*math.sin(sine/10),0.5+0*math.sin(sine/10),0+0*math.sin(sine/10))*CFrame.Angles(math.rad(0+0*math.sin(sine/10)),math.rad(20.87+-5*math.sin(sine/10)),math.rad(-9.7+5*math.sin(sine/10))),.2) 
RH.C0=RH.C0:Lerp(CFrame.new(0.5+0*math.sin(sine/30),-1+0.1*math.sin(sine/30),0+0*math.sin(sine/30))*CFrame.Angles(math.rad(0+5*math.sin(sine/30)),math.rad(-9.7+5*math.sin(sine/30)),math.rad(5.58+5*math.sin(sine/30))),.2) 
LH.C0=LH.C0:Lerp(CFrame.new(-0.5+0*math.sin(sine/30),-1+0.1*math.sin(sine/30),0+0*math.sin(sine/30))*CFrame.Angles(math.rad(0+5*math.sin(sine/30)),math.rad(13.23+5*math.sin(sine/30)),math.rad(-9.7+5*math.sin(sine/30))),.2)
elseif Root.Velocity.Magnitude < 20 then -- walk
hat('COLDSTARESKATEBOARD','Torso',CFrame.new(0,0,0),CFrame.new(-0.2+0*math["sin"](sine/1),0+0*math["sin"](sine/1),3.1+0*math["sin"](sine/1))*CFrame.Angles(math.rad(90+0*math["sin"](sine/1)),math.rad(40+0*math["sin"](sine/1)),math.rad(0+0*math["sin"](sine/1))),false)
NECK.C0=NECK.C0:Lerp(CFrame.new(0+0*math.cos(sine/10),1+0*math.cos(sine/10),0+0*math.cos(sine/10))*CFrame.Angles(math.rad(0+0*math.cos(sine/10)),math.rad(0+0*math.cos(sine/10)),math.rad(0+0*math.cos(sine/10))),.2) 
RJ.C0=RJ.C0:Lerp(CFrame.new(0+0*math.sin(sine/1),-0.5+0*math.sin(sine/1),0+0*math.sin(sine/1))*CFrame.Angles(math.rad(0+0*math.sin(sine/1)),math.rad(89.64+0*math.sin(sine/1)),math.rad(0+0*math.sin(sine/1))),.2) 
RS.C0=RS.C0:Lerp(CFrame.new(1.5+0*math.cos(sine/10),0.5+0*math.cos(sine/10),0+0*math.cos(sine/10))*CFrame.Angles(math.rad(0+5*math.cos(sine/10)),math.rad(5.58+5*math.cos(sine/10)),math.rad(13.23+-5*math.cos(sine/10))),.2) 
LS.C0=LS.C0:Lerp(CFrame.new(-1.5+0*math.sin(sine/10),0.5+0*math.sin(sine/10),0+0*math.sin(sine/10))*CFrame.Angles(math.rad(0+0*math.sin(sine/10)),math.rad(20.87+-5*math.sin(sine/10)),math.rad(-9.7+5*math.sin(sine/10))),.2) 
RH.C0=RH.C0:Lerp(CFrame.new(0.5+0*math.sin(sine/30),-1+0.1*math.sin(sine/30),0+0*math.sin(sine/30))*CFrame.Angles(math.rad(0+5*math.sin(sine/30)),math.rad(-9.7+5*math.sin(sine/30)),math.rad(5.58+5*math.sin(sine/30))),.2) 
LH.C0=LH.C0:Lerp(CFrame.new(-0.5+0*math.sin(sine/30),-1+0.1*math.sin(sine/30),0+0*math.sin(sine/30))*CFrame.Angles(math.rad(0+5*math.sin(sine/30)),math.rad(13.23+5*math.sin(sine/30)),math.rad(-9.7+5*math.sin(sine/30))),.2)
elseif Root.Velocity.Magnitude > 20 then -- run
hat('COLDSTARESKATEBOARD','Torso',CFrame.new(0,0,0),CFrame.new(-0.2+0*math["sin"](sine/1),0+0*math["sin"](sine/1),3.1+0*math["sin"](sine/1))*CFrame.Angles(math.rad(90+0*math["sin"](sine/1)),math.rad(40+0*math["sin"](sine/1)),math.rad(0+0*math["sin"](sine/1))),false)
NECK.C0=NECK.C0:Lerp(CFrame.new(0+0*math.cos(sine/10),1+0*math.cos(sine/10),0+0*math.cos(sine/10))*CFrame.Angles(math.rad(0+0*math.cos(sine/10)),math.rad(0+0*math.cos(sine/10)),math.rad(0+0*math.cos(sine/10))),.2) 
RJ.C0=RJ.C0:Lerp(CFrame.new(0+0*math.sin(sine/1),-0.5+0*math.sin(sine/1),0+0*math.sin(sine/1))*CFrame.Angles(math.rad(0+0*math.sin(sine/1)),math.rad(89.64+0*math.sin(sine/1)),math.rad(0+0*math.sin(sine/1))),.2) 
RS.C0=RS.C0:Lerp(CFrame.new(1.5+0*math.cos(sine/10),0.5+0*math.cos(sine/10),0+0*math.cos(sine/10))*CFrame.Angles(math.rad(0+5*math.cos(sine/10)),math.rad(5.58+5*math.cos(sine/10)),math.rad(13.23+-5*math.cos(sine/10))),.2) 
LS.C0=LS.C0:Lerp(CFrame.new(-1.5+0*math.sin(sine/10),0.5+0*math.sin(sine/10),0+0*math.sin(sine/10))*CFrame.Angles(math.rad(0+0*math.sin(sine/10)),math.rad(20.87+-5*math.sin(sine/10)),math.rad(-9.7+5*math.sin(sine/10))),.2) 
RH.C0=RH.C0:Lerp(CFrame.new(0.5+0*math.sin(sine/30),-1+0.1*math.sin(sine/30),0+0*math.sin(sine/30))*CFrame.Angles(math.rad(0+5*math.sin(sine/30)),math.rad(-9.7+5*math.sin(sine/30)),math.rad(5.58+5*math.sin(sine/30))),.2) 
LH.C0=LH.C0:Lerp(CFrame.new(-0.5+0*math.sin(sine/30),-1+0.1*math.sin(sine/30),0+0*math.sin(sine/30))*CFrame.Angles(math.rad(0+5*math.sin(sine/30)),math.rad(13.23+5*math.sin(sine/30)),math.rad(-9.7+5*math.sin(sine/30))),.2)
end

elseif Mode == 'Attack0' then --attack clerp 

elseif Mode == 'Attack1' then --attack clerp 

elseif Mode == 'Attack3' then --attack clerp 

end
srv.RenderStepped:Wait()
end
end)()
--Created using Nexo Animator V4
